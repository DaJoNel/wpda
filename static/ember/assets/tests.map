{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","wpda-client/tests/acceptance/places-test.js","wpda-client/tests/acceptance/places-test.jshint.js","wpda-client/tests/adapters/application.jshint.js","wpda-client/tests/app.jshint.js","wpda-client/tests/authenticators/drf-token-authenticator.jshint.js","wpda-client/tests/authorizers/drf-token-authorizer.jshint.js","wpda-client/tests/controllers/application.jshint.js","wpda-client/tests/controllers/login.jshint.js","wpda-client/tests/controllers/register.jshint.js","wpda-client/tests/helpers/destroy-app.js","wpda-client/tests/helpers/destroy-app.jshint.js","wpda-client/tests/helpers/ember-simple-auth.js","wpda-client/tests/helpers/module-for-acceptance.js","wpda-client/tests/helpers/module-for-acceptance.jshint.js","wpda-client/tests/helpers/resolver.js","wpda-client/tests/helpers/resolver.jshint.js","wpda-client/tests/helpers/start-app.js","wpda-client/tests/helpers/start-app.jshint.js","wpda-client/tests/mixins/places/save-model-mixin.jshint.js","wpda-client/tests/models/place.jshint.js","wpda-client/tests/resolver.jshint.js","wpda-client/tests/router.jshint.js","wpda-client/tests/routes/application.jshint.js","wpda-client/tests/routes/login.jshint.js","wpda-client/tests/routes/places/edit.jshint.js","wpda-client/tests/routes/places/index.jshint.js","wpda-client/tests/routes/places/new.jshint.js","wpda-client/tests/routes/register.jshint.js","wpda-client/tests/serializers/place.jshint.js","wpda-client/tests/test-helper.js","wpda-client/tests/test-helper.jshint.js","wpda-client/tests/unit/adapters/application-test.js","wpda-client/tests/unit/adapters/application-test.jshint.js","wpda-client/tests/unit/controllers/application-test.js","wpda-client/tests/unit/controllers/application-test.jshint.js","wpda-client/tests/unit/controllers/login-test.js","wpda-client/tests/unit/controllers/login-test.jshint.js","wpda-client/tests/unit/controllers/register-test.js","wpda-client/tests/unit/controllers/register-test.jshint.js","wpda-client/tests/unit/routes/application-test.js","wpda-client/tests/unit/routes/application-test.jshint.js","wpda-client/tests/unit/routes/login-test.js","wpda-client/tests/unit/routes/login-test.jshint.js","wpda-client/tests/unit/routes/register-test.js","wpda-client/tests/unit/routes/register-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('wpda-client/tests/acceptance/places-test', ['exports', 'ember', 'qunit', 'wpda-client/tests/helpers/start-app'], function (exports, _ember, _qunit, _wpdaClientTestsHelpersStartApp) {\n\n  var application;\n  var originalConfirm;\n  var confirmCalledWith;\n\n  (0, _qunit.module)('Acceptance: Place', {\n    beforeEach: function beforeEach() {\n      application = (0, _wpdaClientTestsHelpersStartApp['default'])();\n      originalConfirm = window.confirm;\n      window.confirm = function () {\n        confirmCalledWith = [].slice.call(arguments);\n        return true;\n      };\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(application, 'destroy');\n      window.confirm = originalConfirm;\n      confirmCalledWith = null;\n    }\n  });\n\n  (0, _qunit.test)('visiting /places without data', function (assert) {\n    visit('/places');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'places.index');\n      assert.equal(find('#blankslate').text().trim(), 'No Places found');\n    });\n  });\n\n  (0, _qunit.test)('visiting /places with data', function (assert) {\n    server.create('place');\n    visit('/places');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'places.index');\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('create a new place', function (assert) {\n    visit('/places');\n    click('a:contains(New Place)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'places.new');\n\n      fillIn('label:contains(Is verified) input', 'MyString');\n      fillIn('label:contains(Venue) input', 'MyString');\n      fillIn('label:contains(Name) input', 'MyString');\n      fillIn('label:contains(Permalink) input', 'MyString');\n      fillIn('label:contains(Lock level) input', 'MyString');\n      fillIn('label:contains(Categories) input', 'MyString');\n      fillIn('label:contains(Number) input', 'MyString');\n      fillIn('label:contains(Street) input', 'MyString');\n      fillIn('label:contains(City) input', 'MyString');\n      fillIn('label:contains(State) input', 'MyString');\n      fillIn('label:contains(Country) input', 'MyString');\n      fillIn('label:contains(Updated by) input', 'MyString');\n      fillIn('label:contains(Updated on) input', 'MyString');\n      fillIn('label:contains(User report on) input', 'MyString');\n      fillIn('label:contains(Is residential) input', false);\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('update an existing place', function (assert) {\n    server.create('place');\n    visit('/places');\n    click('a:contains(Edit)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'places.edit');\n\n      fillIn('label:contains(Is verified) input', 'MyString');\n      fillIn('label:contains(Venue) input', 'MyString');\n      fillIn('label:contains(Name) input', 'MyString');\n      fillIn('label:contains(Permalink) input', 'MyString');\n      fillIn('label:contains(Lock level) input', 'MyString');\n      fillIn('label:contains(Categories) input', 'MyString');\n      fillIn('label:contains(Number) input', 'MyString');\n      fillIn('label:contains(Street) input', 'MyString');\n      fillIn('label:contains(City) input', 'MyString');\n      fillIn('label:contains(State) input', 'MyString');\n      fillIn('label:contains(Country) input', 'MyString');\n      fillIn('label:contains(Updated by) input', 'MyString');\n      fillIn('label:contains(Updated on) input', 'MyString');\n      fillIn('label:contains(User report on) input', 'MyString');\n      fillIn('label:contains(Is residential) input', false);\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('show an existing place', function (assert) {\n    server.create('place');\n    visit('/places');\n    click('a:contains(Show)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'places.show');\n\n      assert.equal(find('p strong:contains(Is verified:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Venue:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Name:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Permalink:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Lock level:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Categories:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Number:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Street:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(City:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(State:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Country:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Updated by:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Updated on:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(User report on:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Is residential:)').next().text(), false);\n    });\n  });\n\n  (0, _qunit.test)('delete a place', function (assert) {\n    server.create('place');\n    visit('/places');\n    click('a:contains(Remove)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'places.index');\n      assert.deepEqual(confirmCalledWith, ['Are you sure?']);\n      assert.equal(find('#blankslate').length, 1);\n    });\n  });\n});","define('wpda-client/tests/acceptance/places-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | acceptance/places-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'acceptance/places-test.js should pass jshint.\\nacceptance/places-test.js: line 35, col 3, \\'server\\' is not defined.\\nacceptance/places-test.js: line 78, col 3, \\'server\\' is not defined.\\nacceptance/places-test.js: line 111, col 3, \\'server\\' is not defined.\\nacceptance/places-test.js: line 137, col 3, \\'server\\' is not defined.\\n\\n4 errors');\n  });\n});","define('wpda-client/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('wpda-client/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('wpda-client/tests/authenticators/drf-token-authenticator.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authenticators/drf-token-authenticator.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authenticators/drf-token-authenticator.js should pass jshint.\\nauthenticators/drf-token-authenticator.js: line 33, col 30, \\'error\\' is defined but never used.\\nauthenticators/drf-token-authenticator.js: line 33, col 22, \\'status\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('wpda-client/tests/authorizers/drf-token-authorizer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authorizers/drf-token-authorizer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/drf-token-authorizer.js should pass jshint.');\n  });\n});","define('wpda-client/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('wpda-client/tests/controllers/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass jshint.');\n  });\n});","define('wpda-client/tests/controllers/register.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/register.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/register.js should pass jshint.\\ncontrollers/register.js: line 25, col 22, \\'response\\' is defined but never used.\\ncontrollers/register.js: line 27, col 30, \\'error\\' is defined but never used.\\ncontrollers/register.js: line 27, col 22, \\'status\\' is defined but never used.\\n\\n3 errors');\n  });\n});","define('wpda-client/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('wpda-client/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('wpda-client/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('wpda-client/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'wpda-client/tests/helpers/start-app', 'wpda-client/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _wpdaClientTestsHelpersStartApp, _wpdaClientTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _wpdaClientTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _wpdaClientTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('wpda-client/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('wpda-client/tests/helpers/resolver', ['exports', 'wpda-client/resolver', 'wpda-client/config/environment'], function (exports, _wpdaClientResolver, _wpdaClientConfigEnvironment) {\n\n  var resolver = _wpdaClientResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _wpdaClientConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _wpdaClientConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('wpda-client/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('wpda-client/tests/helpers/start-app', ['exports', 'ember', 'wpda-client/app', 'wpda-client/config/environment'], function (exports, _ember, _wpdaClientApp, _wpdaClientConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _wpdaClientConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _wpdaClientApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('wpda-client/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('wpda-client/tests/mixins/places/save-model-mixin.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/places/save-model-mixin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/places/save-model-mixin.js should pass jshint.');\n  });\n});","define('wpda-client/tests/models/place.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/place.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/place.js should pass jshint.');\n  });\n});","define('wpda-client/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('wpda-client/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('wpda-client/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('wpda-client/tests/routes/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass jshint.');\n  });\n});","define('wpda-client/tests/routes/places/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/places/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/places/edit.js should pass jshint.');\n  });\n});","define('wpda-client/tests/routes/places/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/places/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/places/index.js should pass jshint.');\n  });\n});","define('wpda-client/tests/routes/places/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/places/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/places/new.js should pass jshint.');\n  });\n});","define('wpda-client/tests/routes/register.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/register.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/register.js should pass jshint.');\n  });\n});","define('wpda-client/tests/serializers/place.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/place.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/place.js should pass jshint.\\nserializers/place.js: line 2, col 8, \\'DS\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('wpda-client/tests/test-helper', ['exports', 'wpda-client/tests/helpers/resolver', 'ember-qunit'], function (exports, _wpdaClientTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_wpdaClientTestsHelpersResolver['default']);\n});","define('wpda-client/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('wpda-client/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('wpda-client/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('wpda-client/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('wpda-client/tests/unit/controllers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.');\n  });\n});","define('wpda-client/tests/unit/controllers/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('wpda-client/tests/unit/controllers/login-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass jshint.');\n  });\n});","define('wpda-client/tests/unit/controllers/register-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:register', 'Unit | Controller | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('wpda-client/tests/unit/controllers/register-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/register-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/register-test.js should pass jshint.');\n  });\n});","define('wpda-client/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('wpda-client/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('wpda-client/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('wpda-client/tests/unit/routes/login-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass jshint.');\n  });\n});","define('wpda-client/tests/unit/routes/register-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:register', 'Unit | Route | register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('wpda-client/tests/unit/routes/register-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/register-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/register-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('wpda-client/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingsvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}